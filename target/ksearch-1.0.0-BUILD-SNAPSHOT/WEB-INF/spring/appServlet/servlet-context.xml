<?xml version="1.0" encoding="UTF-8"?>
<!-- bean : 스프링컨테이너에 의해 생성되는 자바의 '객체' -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- 아래와 같이 설정된 mapping경로의 경우 jsp단에서 /resources 자원 경로를 잡을 때, 영향을 준다-->
	<resources mapping="/resources/**" location="/resources/" /> <!-- default config -->
	
	<!-- ***default*** Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<!-- View페이지의 실질적인 물리적 위치 정보를 다루기 위해서 필요한 라이브러리 클래스 -->
	<!-- InternalResourceViewResolver는 viewResolver의 기본클래스로 따로 설정하지 않으면 /WEB_INF/views 폴더 아래 jsp파일을 찾아가도록 한다 -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- ============>
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"> 해석을 하자면,
	controller에서 수행 후 리턴하는 객체인 ModelAndView는 View페이지 이름고 model(data)정보를 포함한다. 
	이 데이터를 view로 보낼 때 resolver views~ 주석 아래 코드에서 view페이지의 경로(prefix)와 파일확장자(suffix)을 지정한다.
	 -->

	<!-- 어노테이션을 클래스에 함께 선언하게 되면 스프링이 자동으로 해당 어노테이션이 붙은 클래스들을 스캔하여 bean으로 생성해주는것 // default scan: @Component @Controller @Service @Repository -->
	<!-- base-package는 패키지를 어디부터 스캔 할 지 지정해주는 부분. 명시 해주면 해당 경로를 포함한 모든 하위 경로에 적용됨 -->
	<context:component-scan base-package="com.konantech.ksearch" />

	<!-- init-method는 객체생성 시 실행되는 함수  -->
	<!-- class : (패키지명을 포함한) 자바의 클래스명 / id : bean의 식별자(유일) / name : id와 같은 기능을 하는 속성-->
    <beans:bean  class="com.konantech.ksearch.config.SearchConstConfigurer" init-method="init" /> <!-- 빈 객체가 생성될 때 호출할 메소드 설정 -->
    <beans:bean  class="com.konantech.ksearch.config.SearchConstConfigurer" init-method="print" />



</beans:beans>
